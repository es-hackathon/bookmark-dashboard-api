// <auto-generated />
using System;
using Bookmark.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bookmark.Persistance.Migrations.Application
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200915161810_Initial-commit-Application")]
    partial class InitialcommitApplication
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bookmark.Domain.Entities.CardFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("CardsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CardsId");

                    b.ToTable("CardFavorite");
                });

            modelBuilder.Entity("Bookmark.Domain.Entities.Cards", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30d5e915-5f2f-4fb0-be7c-1735b1863cda"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Github account",
                            DisplayIcon = "Bookmark",
                            Name = "Github Project Onion Architecture",
                            Url = "https://github.com/Amitpnk"
                        },
                        new
                        {
                            Id = new Guid("43915137-55a7-4c4c-bfd2-dfaf55d6b0a8"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Github account",
                            DisplayIcon = "Bookmark",
                            Name = "Github Project Clean Architecture",
                            Url = "https://github.com/Amitpnk"
                        },
                        new
                        {
                            Id = new Guid("76499266-4299-4590-90d7-929b56380f1a"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Github account",
                            DisplayIcon = "Bookmark",
                            Name = "Github account",
                            Url = "https://github.com/Amitpnk"
                        },
                        new
                        {
                            Id = new Guid("18c8a690-76a2-4c11-9f48-5b3b1a841d37"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Github account",
                            DisplayIcon = "Bookmark",
                            Name = "Github account",
                            Url = "https://github.com/Amitpnk"
                        },
                        new
                        {
                            Id = new Guid("dfc535ac-534c-4f52-bd30-95855022247c"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Github account",
                            DisplayIcon = "Bookmark",
                            Name = "Github account",
                            Url = "https://github.com/Amitpnk"
                        });
                });

            modelBuilder.Entity("Bookmark.Domain.Entities.GroupShared", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("CardsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CardsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("GroupShared");
                });

            modelBuilder.Entity("Bookmark.Domain.Entities.Groups", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("286b9890-8fc8-4fc7-bc11-7dec3387460c"),
                            Description = "Github account",
                            IsActive = true,
                            Name = "Github account"
                        },
                        new
                        {
                            Id = new Guid("74069bff-4d1c-488e-bab6-b255c7af8581"),
                            Description = "c-sharp corner",
                            IsActive = true,
                            Name = "c-sharp corner"
                        },
                        new
                        {
                            Id = new Guid("182b52ef-22e3-4440-993f-07cf75da41ac"),
                            Description = "Code project",
                            IsActive = true,
                            Name = "Code project"
                        },
                        new
                        {
                            Id = new Guid("d6c3b553-cea4-4cc8-985d-814a7cb491a8"),
                            Description = "Microsoft extension",
                            IsActive = true,
                            Name = "Microsoft extension"
                        });
                });

            modelBuilder.Entity("Bookmark.Domain.Entities.CardFavorite", b =>
                {
                    b.HasOne("Bookmark.Domain.Entities.Cards", "Cards")
                        .WithMany()
                        .HasForeignKey("CardsId");
                });

            modelBuilder.Entity("Bookmark.Domain.Entities.GroupShared", b =>
                {
                    b.HasOne("Bookmark.Domain.Entities.Cards", "Cards")
                        .WithMany()
                        .HasForeignKey("CardsId");

                    b.HasOne("Bookmark.Domain.Entities.Groups", "Groups")
                        .WithMany()
                        .HasForeignKey("GroupsId");
                });
#pragma warning restore 612, 618
        }
    }
}
